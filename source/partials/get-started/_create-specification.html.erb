<div class="sidebar-content" id="create-specification">
        <h2 class="sidebar-content_header"> Create your own test specification </h2>

        <p class="sidebar-content_description"> 
          Now that you understand how to create and run a Gauge project, it is time to create your own test specifications. We’ll start by looking at what a sample test specification looks like in Gauge. 
        </p>

        <div class="note-box">
          <p class="note-box_desc">
            In this example, we’ll be using screenshots and examples from the VS Code interface. You can use the Gauge 
            <a href="https://docs.gauge.org/latest/writing-specifications.html#ide-plugins">plugins for Intellij and Visual Studio</a> or use any other editor to edit specifications. 
          </p>
        </div>

        <section class="sub-content">
          <h3 class="sub-content_heading_sm"> Improve your authoring experience with VS Code  </h3>
          <p class="sidebar-content_description">  
            We recommend that you download and use the Gauge VS Code plugin. Using the plugin will enhance your authoring experience with Gauge. 
          </p>

          <p class="sidebar-content_description">
            The best way to do this, is to open your project <span class="highlight"> gaugetest </span> in VS Code. As soon as you do this, you’ll be prompted by VS Code to install recommendations. Choose to ‘Install All’ and you’re all set to start using the plugin to create specifications. 
          </p>

          <img class="img-resposive" src= <%= image_path('get_started-screens/create-spec-1.jpg') %> />
          
          <p class="sidebar-content_description">  
            You can also install the VS Code plugin in the command line by following the instructions <a href="https://github.com/getgauge/gauge-vscode#install"> here </a>.   
          </p>
        </section>

        <section class="sub-content">
          <h3 class="sub-content_heading_sm"> Understand the Gauge test specification </h3>
          
          <p class="sidebar-content_description"> 
            The Gauge specification file is present under <span class="highlight">/specs/example.spec</span>. Here’s what a typical specification looks like. 
          </p>

          <img class="img-resposive" src= <%= image_path('get_started-screens/create-spec-2.jpg') %> />

          <p class="sidebar-content_description"> 
            There are 3 basic concepts to keep in mind for writing a Gauge test. 
            <ul class="numbered-points">
              <li><span class="number">1</span> Specification </li>
              <li><span class="number">2</span> Scenario </li>
              <li><span class="number">3</span> Step </li>
            </ul>
          </p>

          <p class="sidebar-content_description"> 
            A <strong>specification </strong> or spec must begin with a spec heading and a single specification file can contain only one spec heading. It is written in &lt;H1&gt; syntax of markdown. 
          </p>
          <p class="sidebar-content_description"> 
            Every spec contains one or more scenarios.
          </p>

          <div class="note-box">
            <p class="note-box_desc"> 
              Each <strong>scenario</strong> represents a single business flow. 
            </p>
          </div>

          <p class="sidebar-content_description">  
            A specification can have multiple scenarios. The scenario heading is written in markdown &lt;H2&gt; syntax
          </p>

          <p class="sidebar-content_description">  
            A scenario contains one or more steps under it.
          </p>  

          <div class="note-box">
            <p class="note-box_desc"> 
              <strong>Steps</strong> are the executable components of your specification. 
            </p>
          </div>

          <p class="sidebar-content_description">  
            They are written as markdown unordered list items (bulleted points). The values written in quotes are parameters which are passed into the underlying step implementation as a language specific structure.
          </p>

          <div class="note-box">
            <p class="note-box_desc"> 
              You will also be able to see Run and Debug options on hovering over the Spec or Scenario heading with the Gauge plugin. If you’ve installed the plugin and do not see this option, try reloading the plugin and then reopening the project. 
            </p>
          </div>

          <p class="sidebar-content_description">  
            Every step has an underlying code implementation for the programming language used. To see the code behind the step, right click a step to ‘Go to Definition’. 
          </p>

          <img class="img-resposive" src= <%= image_path('get_started-screens/create-spec-3.jpg') %> />

          <div class="note-box">
            <p class="note-box_desc"> 
              This is possible with a single click using the Gauge plugin. If you don’t have the plugin installed, you’ll have to navigate to /tests/step_implementation.js to see the definition of the steps. 
            </p>
          </div>

          <p class="sidebar-content_description">  
            This is an example of the code implementation behind the step. We have used Taiko to create the scripts for this Gauge project. You can use Taiko or a web driver of your choice (Selenium, Sahi) to create your automation tests. 
          </p>
          <img src= <%= image_path('get_started-screens/create-spec-4.jpg') %> />

          <p class="sidebar-content_description">  
            Once you’ve made edits, you can run your Ggauge specs in VS Code by choosing the option to ‘Run Spec’ on hovering over the specification heading. If you don’t have the plugin, you can use this command
          </p>

          <div class="code-box">
            <pre>
              gauge run specs
            </pre>
          </div>

          <img class="img-resposive" src= <%= image_path('get_started-screens/create-spec-5.jpg') %> />

          <p class="sidebar-content_description">  
            Now you’re ready to start creating your own test specifications. 
          </p>
        </section>

        <%= partial 'partials/_page_controls.html.erb', :locals => { :text_left => 'Generate a Report', :link_text_lt => '#generate-report', :text_right => 'Next Steps',  :link_text_rt => '#next-steps' } %>
      </div>